require 'rails_helper'
require 'paperclip'
require 'rack/test'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SecretFilesController, :type => :controller do

  include SecretFilesHelper
  # This should return the minimal set of attributes required to create a valid
  # SecretFile. As you add validations to SecretFile, be sure to
  # adjust the attributes here as well.
  before(:each) do
      SecretFilesHelper.stub(:system).and_return(true)
      controller.stub(:send_file).and_return(true)
      ApplicationController.any_instance.stub(:login).and_return(true)
      ApplicationController.any_instance.stub(:logout).and_return(true)
      File.stub(:exist?).and_return(true)
  end

  before (:all) do
      @time = Time.now.strftime('%H%M')
      @testFile = File.open("public/data/environment_role_cb\\user@test.com_secret_file_#{@time}.txt", "w")
      @testFile.write("this is just a trial")
  end
  let (:test_employee_data) do {

      network_name: "user@test.com",
      full_name: "user@test.com test",
      email: "user@test.com",
      :manager =>
      {
        network_name: "umanager",
        full_name: "umanager test",
        email: "umanager@test.com",
        job_title: "test manager"
      },
      :coworkers =>
      [
        {
          network_name: "coworker1",
          full_name: "coworker1 test",
          email: "coworker1@test.com",
          job_title: "coworker1 tester"
        },
        {
          network_name: "coworker2",
          full_name: "coworker2 test",
          email: "coworker2@test.com",
          job_title: "coworker2 tester"
        }
      ],
      :subordinates =>
      [
        {
          network_name: "subordinate1",
          full_name: "subordinate1 test",
          email: "subodinate1@test.com",
          job_title: "subordinate1 tester"
        },
        {
          network_name: "subordinate2",
          full_name: "subordinate2 test",
          email: "subordinate2@test.com",
          job_title: "subordinate2 tester"
        }
      ]
    }
end

  let(:valid_attributes) do {
    id: 1,
    file_name: "secret_file.txt",
    environment: "environment",
    role: "role",
    login: "cb\\user@test.com",
    :attachment => Rack::Test::UploadedFile.new(Rails.root.join('spec/fixtures/files/secret_file.txt'), 'secret_file/txt')
}
  end

  let(:invalid_attributes)  do {
    id: 3,
    file_name: "",
    environment: "",
    role: "",
    login: "",
    :attachment => Rack::Test::UploadedFile.new(Rails.root.join('spec/fixtures/files/secret_file.txt'), 'secret_file/txt')
  }
  end

  before (:each) do
    @user = User.create!({
      :login => "cb\\user@test.com",
      :password => 'please12345',
      :password_confirmation => 'please12345'
      })
    sign_in @user


      CbEmployees.create(:full_name => "user@test.com",
                        :network_name => "user@test.com",
                        :email => "tester@test.com",
                        :job_title => "tester",
                        :is_manager => false,
                        :manager => test_employee_data[:manager],
                        :coworker => test_employee_data[:coworkers],
                        :subordinates => test_employee_data[:subordinates])
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SecretFilesController. Be sure to keep this updated too.
  let(:valid_session) { {} }


  # after (:all) do
  #     @time = Time.now.strftime('%H%M')
  #     @testFile = File.new("public/data/secret_file.txt")
  #     File.delete(@testFile)
  # end

  describe "GET index" do
    it "assigns all secret_files as @secret_files" do
      secret_file = SecretFile.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:secret_files)).to eq([secret_file])
    end
  end

  describe "GET show" do
    it "downloads the requested secret_file in public/data" do
      secret_file = SecretFile.create! valid_attributes
      post :edit, {:id => 1, :owner => "user@test.com"}, valid_session
      get :show, {:id => 1}, valid_session
      expect(assigns(:secret_file)).to eq(secret_file)
    end
  end

  describe "GET new" do
    it "assigns a new secret_file as @secret_file" do
      get :new, {}, valid_session
      expect(assigns(:secret_file)).to be_a_new(SecretFile)
    end
  end

  describe "GET edit" do

    it "assigns the requested secret_file as @secret_file" do
      SecretFilesHelper.should_receive(:collect_secret_from_backup)
      secret_file = SecretFile.create! valid_attributes
      get :edit, {:id => secret_file.to_param}, valid_session
      expect(assigns(:secret_file)).to eq(secret_file)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new SecretFile" do
        expect {
          post :create, {:secret_file => valid_attributes, :owner => ["user@test.com"]}, valid_session
        }.to change(SecretFile, :count).by(1)
      end

      it "redirects to the create new page" do
        post :create, {:secret_file => valid_attributes, :owner => ["user@test.com"]}, valid_session
        expect(response).to redirect_to(index_url)
      end
    end

    describe "with invalid params" do
      it "redirects to the create new page" do
        SecretFile.any_instance.stub(:save).and_return(false)
        post :create, {:secret_file => invalid_attributes, :owner => ["user@test.com"]}, valid_session
        expect(assigns(:secret_file)).to redirect_to(new_secret_file_path + "?error_empty_fields=true")
      end

      it "redirects to the create new page" do
        SecretFile.any_instance.stub(:save).and_return(false)
        post :create, {:secret_file => valid_attributes, :owner => ["user@test.com"]}, valid_session
        expect(response).to redirect_to(new_secret_file_path + "?error_generic=true")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) do {
        id: 1,
        file_name: "secret_file.txt",
        environment: "environments",
        role: "roles",
        login: "cb\\user@test.com",
        :attachment => Rack::Test::UploadedFile.new(Rails.root.join('spec/fixtures/files/secret_file.txt'), 'secret_file/txt')

      }
      end

      it "updates the requested secret_file and redirects to the root url" do
        secret_file = SecretFile.create! valid_attributes
        put :update, {:id => secret_file.to_param, :secret_file => new_attributes, :owner => ["user@test.com"]}, valid_session
        secret_file.reload
        expect(assigns(:secret_file)).to redirect_to(index_url)
      end

      it "redirects to the create new page due to duplicate info" do
        secret_file = SecretFile.create! valid_attributes
        put :update, {:id => secret_file.to_param, :secret_file => valid_attributes, :owner => ["user@test.com"]}, valid_session
        expect(response).to redirect_to(new_secret_file_path + "?error_duplicate_info=true&user=cb%5Cuser%40test.com")
      end
    end

    describe "with invalid params" do
      it "assigns the secret_file as @secret_file" do
        secret_file = SecretFile.create! valid_attributes
        put :update, {:id => secret_file.to_param, :secret_file => invalid_attributes, :owner => ["user@test.com"]}, valid_session
        expect(assigns(:secret_file)).to redirect_to(new_secret_file_path + "?error_empty_fields=true")
      end

      it "re-renders the 'edit' template" do
        SecretFile.any_instance.stub(:save).and_return(false)
        secret_file = SecretFile.create! valid_attributes
        put :update, {:id => secret_file.to_param, :secret_file => invalid_attributes, :owner => ["user@test.com"]}, valid_session
        expect(response).to redirect_to(new_secret_file_path + "?error_empty_fields=true")
      end
    end
  end

  describe "upload with _default environment" do
    let(:valid_attr) do 
    {
      id: 1,
      file_name: "secret_file.txt",
      environment: "pi_test",
      role: "pi_trials",
      login: "cb\\user@test.com",
      :attachment => Rack::Test::UploadedFile.new(Rails.root.join('spec/fixtures/files/secret_file.txt'), 'secret_file/txt')
    }
    end

    let(:valid_default_attr) do 
    {
      id: 2,
      file_name: "default.txt",
      environment: "_default",
      role: "anything",
      login: "cb\\user@test.com",
      :attachment => Rack::Test::UploadedFile.new(Rails.root.join('spec/fixtures/files/default.txt'), 'default/txt')
    }
    end

    let(:invalid_default_attr) do 
    {
      id: 1,
      file_name: "secret_file.txt",
      environment: "_default",
      role: "anything",
      login: "cb\\user@test.com",
      :attachment => Rack::Test::UploadedFile.new(Rails.root.join('spec/fixtures/files/secret_file.txt'), 'secret_file/txt')
    }
    end

    it "should fail trying to upload a file under _default with filename already existing" do
      SecretFile.create! valid_attr
      post :create, {:secret_file => invalid_default_attr, :owner => ["user@test.com"]}, valid_session
      expect(response).to redirect_to(new_secret_file_path + "?error_duplicate_filename=true&user=+cb%5Cuser%40test.com")
      
    end

    it "should pass uploading the _default file" do
      SecretFile.create! valid_attr
      expect{post :create, {:secret_file => valid_default_attr, :owner => ["user@test.com"]}, valid_session}.to change(SecretFile, :count).by(1)    
    end
    # after(:all) do
    #   SecretFile.destroy(SecretFile.all)
    # end
  end
  describe "DELETE destroy" do
    it "destroys the requested secret_file" do
      SecretFilesHelper.should_receive(:knife_delete)
      secret_file = SecretFile.create! valid_attributes
      expect {
        delete :destroy, {:id => secret_file.to_param}, valid_session
      }.to change(SecretFile, :count).by(-1)
    end

    it "redirects to the secret_files list" do
      SecretFilesHelper.should_receive(:knife_delete)
      secret_file = SecretFile.create! valid_attributes
      delete :destroy, {:id => secret_file.to_param}, valid_session
      expect(response).to redirect_to(secret_files_url)
    end
  end

  describe "test accessible files" do
    let(:coworker1_file) do
      {
        id: 1,
        file_name: "coworker1.txt",
        environment: "testenv",
        role: "testrole",
        login: "cb\\coworker1",
        :attachment => Rack::Test::UploadedFile.new(Rails.root.join('spec/fixtures/files/coworker1.txt'), 'coworker1/txt')
      }
    end
      let(:coworker2_file) do
      {
        id: 2,
        file_name: "coworker2.txt",
        environment: "testenv",
        role: "testrole",
        login: "cb\\coworker2",
        :attachment => Rack::Test::UploadedFile.new(Rails.root.join('spec/fixtures/files/coworker1.txt'), 'coworker2/txt')
      }
    end
      let(:subordinate1_file) do
      {
        id: 3,
        file_name: "subordinate1.txt",
        environment: "testenv",
        role: "testrole",
        login: "cb\\subordinate1",
        :attachment => Rack::Test::UploadedFile.new(Rails.root.join('spec/fixtures/files/subordinate1.txt'), 'subordinate1/txt')
      }
    end
      let(:subordinate2_file) do
      {
        id: 4,
        file_name: "subordinate2.txt",
        environment: "testenv",
        role: "testrole",
        login: "cb\\subordinate2",
        :attachment => Rack::Test::UploadedFile.new(Rails.root.join('spec/fixtures/files/subordinate2.txt'), 'subordinate2/txt')
      }
    end
      let(:manager_file) do
      {
        id: 5,
        file_name: "manager.txt",
        environment: "testenv",
        role: "testrole",
        login: "cb\\umanager",
        :attachment => Rack::Test::UploadedFile.new(Rails.root.join('spec/fixtures/files/manager.txt'), 'manager/txt')
      }
    end
      let(:self_file) do
      {
        id: 6,
        file_name: "self.txt",
        environment: "testenv",
        role: "testrole",
        login: "cb\\user@test.com",
        :attachment => Rack::Test::UploadedFile.new(Rails.root.join('spec/fixtures/files/self.txt'), 'self/txt')
      }
    end
      let(:unaccessible_file) do
      {
        id: 7,
        file_name: "unaccessible.txt",
        environment: "testenv",
        role: "testrole",
        login: "cb\\anyone@test.com",
        :attachment => Rack::Test::UploadedFile.new(Rails.root.join('spec/fixtures/files/unaccessible.txt'), 'unaccessible/txt')
      }
    end

      # before(:all) do
      #   manager_secret = SecretFile.create! manager_file
      #   coworker1_secret = SecretFile.create! coworker1_file
      #   coworker2_secret = SecretFile.create! coworker2_file
      #   subordinate1_secret = SecretFile.create! subordinate1_file
      #   subordinate2_secret = SecretFile.create! subordinate2_file
      #   self_secret = SecretFile.create! self_file
      #   unaccessible_secret = SecretFile.create! unaccessible_file
      # end

      it "makes sure that the current user cannot view the unnaccessible file" do
        SecretFilesHelper.stub(:decrypt_and_store_secret).with(anything).and_return(true)
        manager_secret = SecretFile.create! manager_file
        coworker1_secret = SecretFile.create! coworker1_file
        coworker2_secret = SecretFile.create! coworker2_file
        subordinate1_secret = SecretFile.create! subordinate1_file
        subordinate2_secret = SecretFile.create! subordinate2_file
        self_secret = SecretFile.create! self_file
        unaccessible_secret = SecretFile.create! unaccessible_file
        expect{get :edit, {:id => 7}, valid_session}.to raise_error(RuntimeError)
      end
      it "makes sure that the current user can view the accessible files" do
        SecretFilesHelper.stub(:decrypt_and_store_secret).with(anything).and_return(true)
        manager_secret = SecretFile.create! manager_file
        coworker1_secret = SecretFile.create! coworker1_file
        coworker2_secret = SecretFile.create! coworker2_file
        subordinate1_secret = SecretFile.create! subordinate1_file
        subordinate2_secret = SecretFile.create! subordinate2_file
        self_secret = SecretFile.create! self_file
        unaccessible_secret = SecretFile.create! unaccessible_file
        get :edit, {:id => 1}, valid_session
        expect(response).to be_success
      end
  end
end

module Helper
  def self.file_writer(filename, contents)
    file_to_write = File.new(Rails.root.join("#{filename}"), "w")
    file_to_write.write(contents)

  end
end
